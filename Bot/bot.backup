import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, InputFile, BufferedInputFile
from aiogram.filters import Command, CommandObject
from aiogram.utils.markdown import hbold, hcode, hitalic
from aiogram.enums import ParseMode
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv
import psycopg2
from psycopg2.extras import RealDictCursor
from datetime import datetime
from aiogram.client.default import DefaultBotProperties
import csv
import io
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.callback_data import CallbackData
import matplotlib.pyplot as plt
import numpy as np

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
BOT_TOKEN = os.getenv('BOT_TOKEN', '8183078178:AAHWVJ_WJ8Fe4oY_G2EFtjYYd_tvN1P_imU')
ADMIN_ID = int(os.getenv('ADMIN_ID', 827470359))
DB_URL = os.getenv('DB_URL', 'postgres://neondb_owner:npg_MOxCSv6LNE3K@ep-long-dream-a418igmv-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require')

# --- FSM (–Ω–∞ –±—É–¥—É—â–µ–µ, –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Ç.–¥.) ---
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö ---
def get_db_connection():
    return psycopg2.connect(DB_URL, cursor_factory=RealDictCursor)

# --- CallbackData –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π ---
class OrderFilterCallback(CallbackData, prefix="of"):  # —Ñ–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    status: str

class MassActionCallback(CallbackData, prefix="ma"):  # –º–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    action: str
    ids: str  # id —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
def get_main_menu():
    keyboard = [
        [InlineKeyboardButton(text="üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã", callback_data='orders')],
        [InlineKeyboardButton(text="üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞", callback_data='find_menu')],
        [InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='stats')],
        [InlineKeyboardButton(text="üìà –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂", callback_data='sales_graph')],
        [InlineKeyboardButton(text="üóÇ –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É", callback_data='filter_menu')],
        [InlineKeyboardButton(text="üß© –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è", callback_data='mass_select')],
        [InlineKeyboardButton(text="üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤", callback_data='export')],
        [InlineKeyboardButton(text="‚ùì –ü–æ–º–æ—â—å", callback_data='help')],
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def get_back_menu():
    return InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]])

def get_status_buttons(order_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üü° –í –æ–±—Ä–∞–±–æ—Ç–∫–µ', callback_data=f'setstatus:{order_id}:pending'),
         InlineKeyboardButton(text='üü¢ –û–ø–ª–∞—á–µ–Ω', callback_data=f'setstatus:{order_id}:paid')],
        [InlineKeyboardButton(text='üî¥ –û—Ç–º–µ–Ω—ë–Ω', callback_data=f'setstatus:{order_id}:cancelled'),
         InlineKeyboardButton(text='‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω', callback_data=f'setstatus:{order_id}:done')],
        [InlineKeyboardButton(text='‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑', callback_data=f'deleteorder_confirm:{order_id}')],
        [InlineKeyboardButton(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')],
    ])

def get_delete_confirm_buttons(order_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='‚ùå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —É–¥–∞–ª–µ–Ω–∏–µ', callback_data=f'deleteorder:{order_id}')],
        [InlineKeyboardButton(text='‚Ü©Ô∏è –û—Ç–º–µ–Ω–∞', callback_data=f'order:{order_id}')],
        [InlineKeyboardButton(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')],
    ])

def get_find_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='üîé –ü–æ–∏—Å–∫ –ø–æ email/—Ç–µ–ª–µ—Ñ–æ–Ω—É', callback_data='find_contact')],
        [InlineKeyboardButton(text='üîé –ü–æ–∏—Å–∫ –ø–æ ID', callback_data='find_id')],
        [InlineKeyboardButton(text='üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main_menu')],
    ])

def get_filter_menu():
    builder = InlineKeyboardBuilder()
    builder.button(text="–í—Å–µ", callback_data=OrderFilterCallback(status="all"))
    builder.button(text="–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", callback_data=OrderFilterCallback(status="pending"))
    builder.button(text="–û–ø–ª–∞—á–µ–Ω", callback_data=OrderFilterCallback(status="paid"))
    builder.button(text="–í—ã–ø–æ–ª–Ω–µ–Ω", callback_data=OrderFilterCallback(status="done"))
    builder.button(text="–û—Ç–º–µ–Ω—ë–Ω", callback_data=OrderFilterCallback(status="cancelled"))
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(2, 2, 1)
    return builder.as_markup()

def get_mass_action_menu(selected_ids):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=MassActionCallback(action="delete", ids=selected_ids))
    builder.button(text="üü° –í –æ–±—Ä–∞–±–æ—Ç–∫–µ", callback_data=MassActionCallback(action="setstatus_pending", ids=selected_ids))
    builder.button(text="üü¢ –û–ø–ª–∞—á–µ–Ω", callback_data=MassActionCallback(action="setstatus_paid", ids=selected_ids))
    builder.button(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω", callback_data=MassActionCallback(action="setstatus_done", ids=selected_ids))
    builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(2, 2, 1)
    return builder.as_markup()

# --- –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ---
def format_status(status):
    status_map = {
        'pending': 'üü° <b>–í –æ–±—Ä–∞–±–æ—Ç–∫–µ</b>',
        'paid': 'üü¢ <b>–û–ø–ª–∞—á–µ–Ω</b>',
        'cancelled': 'üî¥ <b>–û—Ç–º–µ–Ω—ë–Ω</b>',
        'done': '‚úÖ <b>–í—ã–ø–æ–ª–Ω–µ–Ω</b>',
    }
    return status_map.get(status, f'‚ùî <b>{status}</b>')

def format_datetime(dt):
    if isinstance(dt, str):
        try:
            dt = datetime.fromisoformat(dt.replace('Z', '+00:00'))
        except Exception:
            return str(dt)
    return dt.strftime('%d %B %Y, %H:%M')

def format_order(order, new=False):
    contact = order.get('contact')
    items = order.get('items')
    contact_str = ''
    phone = ''
    email = ''
    preferred = ''
    if contact:
        if isinstance(contact, dict):
            phone = contact.get('phone', '')
            email = contact.get('email', '')
            preferred = contact.get('preferredContact', '')
            contact_str = f"\n<b>–ö–ª–∏–µ–Ω—Ç:</b>"
            if phone:
                contact_str += f"\nüìû <a href='tel:{phone}'>{phone}</a>"
            if email:
                contact_str += f"\n‚úâÔ∏è <a href='mailto:{email}'>{email}</a>"
            if preferred == 'whatsapp' and phone:
                contact_str += f"\nüí¨ <a href='https://wa.me/{''.join(filter(str.isdigit, phone))}'>WhatsApp</a>"
        else:
            contact_str = f"\n<b>–ö–æ–Ω—Ç–∞–∫—Ç:</b> {contact}"
    items_str = ''
    if items:
        if isinstance(items, list):
            items_str = '\n'.join([
                f"‚Ä¢ {i.get('title', '')} (<b>{i.get('quantity', '')} —à—Ç.</b>) ‚Äî <b>{i.get('price', '')}‚ÇΩ</b>" for i in items
            ])
        else:
            items_str = str(items)
    lines = []
    if new:
        lines.append("üõç <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑!</b>")
    lines.append(f"<b>ID:</b> <code>{order['id']}</code>")
    lines.append(f"<b>–°—Ç–∞—Ç—É—Å:</b> {format_status(order['status'])}")
    lines.append(f"<b>–°—É–º–º–∞:</b> <b>{order['totalPrice']}‚ÇΩ</b>")
    lines.append(f"<b>–°–æ–∑–¥–∞–Ω:</b> <i>{format_datetime(order['createdAt'])}</i>{contact_str}")
    lines.append("<b>–¢–æ–≤–∞—Ä—ã:</b>")
    lines.append(items_str)
    msg = '\n'.join(lines)
    return msg

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–∞ ---
def is_admin(user_id):
    return int(user_id) == ADMIN_ID

# --- –•—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–∫–∞–∑–∞ ---
LAST_ORDER_ID_FILE = 'last_order_id.txt'
def get_last_order_id():
    try:
        with open(LAST_ORDER_ID_FILE, 'r') as f:
            return f.read().strip()
    except FileNotFoundError:
        return None

def set_last_order_id(order_id):
    with open(LAST_ORDER_ID_FILE, 'w') as f:
        f.write(str(order_id))

# --- –ö–æ–º–∞–Ω–¥—ã ---
@dp.message(Command('start'))
async def cmd_start(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∫—É–ø–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å? https://railguard.ru')
        return
    await message.answer(
        "üëã <b>–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!</b>\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:</b>\n\n"
        "<b>üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã</b> ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤\n"
        "<b>üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞</b> ‚Äî –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –ø–æ email, —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ ID\n"
        "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º –∏ —Ç–æ–ø —Ç–æ–≤–∞—Ä–∞–º\n"
        "<b>üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤</b> ‚Äî –≤—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ CSV\n"
        "<b>‚ùì –ü–æ–º–æ—â—å</b> ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥",
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_menu()
    )

# --- Callback-–º–µ–Ω—é ---
@dp.callback_query(F.data == 'main_menu')
async def cb_main_menu(call: types.CallbackQuery):
    await call.answer()
    if not is_admin(call.from_user.id):
        await call.message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∫—É–ø–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å? https://railguard.ru')
        return
    await call.message.answer(
        "üëã <b>–ü—Ä–∏–≤–µ—Ç, –∞–¥–º–∏–Ω!</b>\n\n<b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:</b>\n\n"
        "<b>üì¶ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã</b> ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤\n"
        "<b>üîç –ü–æ–∏—Å–∫ –∑–∞–∫–∞–∑–∞</b> ‚Äî –Ω–∞–π—Ç–∏ –∑–∞–∫–∞–∑ –ø–æ email, —Ç–µ–ª–µ—Ñ–æ–Ω—É –∏–ª–∏ ID\n"
        "<b>üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b> ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º –∏ —Ç–æ–ø —Ç–æ–≤–∞—Ä–∞–º\n"
        "<b>üì§ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤</b> ‚Äî –≤—ã–≥—Ä—É–∑–∏—Ç—å –≤—Å–µ –∑–∞–∫–∞–∑—ã –≤ CSV\n"
        "<b>‚ùì –ü–æ–º–æ—â—å</b> ‚Äî —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥",
        parse_mode=ParseMode.HTML,
        reply_markup=get_main_menu()
    )

@dp.callback_query(F.data == 'orders')
async def cb_orders(call: types.CallbackQuery):
    await call.answer()
    if not is_admin(call.from_user.id):
        await call.message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∫—É–ø–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å? https://railguard.ru')
        return
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            cur.execute('SELECT "id", "status", "totalPrice", "createdAt", "contact" FROM "Order" ORDER BY "createdAt" DESC LIMIT 10;')
            orders = cur.fetchall()
        if not orders:
            await call.message.answer('‚ùå <b>–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –≤ –±–∞–∑–µ.</b>', parse_mode=ParseMode.HTML, reply_markup=get_back_menu())
        else:
            text = '\n\n'.join([
                f"<b>ID:</b> <code>{o['id']}</code>\n<b>–°—Ç–∞—Ç—É—Å:</b> {format_status(o['status'])}\n<b>–°—É–º–º–∞:</b> <b>{o['totalPrice']}‚ÇΩ</b>\n<b>–°–æ–∑–¥–∞–Ω:</b> <i>{format_datetime(o['createdAt'])}</i>\n<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{o['contact'].get('phone', '') if isinstance(o['contact'], dict) else ''}</code>\n<b>Email:</b> <code>{o['contact'].get('email', '') if isinstance(o['contact'], dict) else ''}</code>" for o in orders
            ])
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–∫–∞–∑–∞
            builder = InlineKeyboardBuilder()
            for o in orders:
                builder.button(text=f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {o['id'][:6]}", callback_data=f"order:{o['id']}")
            builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            builder.adjust(2, 1)
            await call.message.answer(f"<b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã:</b>\n\n{text}", parse_mode=ParseMode.HTML, reply_markup=builder.as_markup())
    finally:
        conn.close()

@dp.callback_query(F.data.startswith('order:'))
async def cb_order_detail(call: types.CallbackQuery):
    await call.answer()
    if not is_admin(call.from_user.id):
        await call.message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∫—É–ø–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å? https://railguard.ru')
        return
    order_id = call.data.split(':')[1]
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            cur.execute('SELECT * FROM "Order" WHERE "id"=%s;', (order_id,))
            order = cur.fetchone()
        if not order:
            await call.message.answer('‚ùå <b>–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>', parse_mode=ParseMode.HTML, reply_markup=get_back_menu())
        else:
            msg = format_order(order)
            await call.message.answer(msg, parse_mode=ParseMode.HTML, reply_markup=get_status_buttons(order_id))
    finally:
        conn.close()

@dp.callback_query(F.data.startswith('setstatus:'))
async def cb_setstatus(call: types.CallbackQuery):
    await call.answer()
    if not is_admin(call.from_user.id):
        await call.message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∫—É–ø–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å? https://railguard.ru')
        return
    _, order_id, status = call.data.split(':')
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            cur.execute('UPDATE "Order" SET "status"=%s WHERE "id"=%s RETURNING *;', (status, order_id))
            order = cur.fetchone()
            conn.commit()
        if order:
            msg = format_order(order)
            await call.message.answer(msg, parse_mode=ParseMode.HTML, reply_markup=get_status_buttons(order_id))
        else:
            await call.message.answer('‚ùå <b>–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>', parse_mode=ParseMode.HTML, reply_markup=get_back_menu())
    finally:
        conn.close()

@dp.callback_query(F.data.startswith('deleteorder_confirm:'))
async def cb_delete_confirm(call: types.CallbackQuery):
    await call.answer()
    if not is_admin(call.from_user.id):
        await call.message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∫—É–ø–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å? https://railguard.ru')
        return
    order_id = call.data.split(':')[1]
    await call.message.answer('‚ùóÔ∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑?</b>', parse_mode=ParseMode.HTML, reply_markup=get_delete_confirm_buttons(order_id))

@dp.callback_query(F.data.startswith('deleteorder:'))
async def cb_delete_order(call: types.CallbackQuery):
    await call.answer()
    if not is_admin(call.from_user.id):
        await call.message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∫—É–ø–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å? https://railguard.ru')
        return
    order_id = call.data.split(':')[1]
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            cur.execute('DELETE FROM "Order" WHERE "id"=%s RETURNING "id";', (order_id,))
            result = cur.fetchone()
            conn.commit()
        if result:
            await call.message.answer(f'‚úÖ –ó–∞–∫–∞–∑ {order_id} —É–¥–∞–ª—ë–Ω.', parse_mode=ParseMode.HTML, reply_markup=get_back_menu())
        else:
            await call.message.answer('‚ùå <b>–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>', parse_mode=ParseMode.HTML, reply_markup=get_back_menu())
    finally:
        conn.close()

@dp.callback_query(F.data == 'help')
async def cb_help(call: types.CallbackQuery):
    await call.answer()
    await call.message.answer(
        "<b>‚ùì –ü–æ–º–æ—â—å</b>\n\n"
        "<b>/orders</b> ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã\n"
        "<b>/stats</b> ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
        "<b>/order &lt;id&gt;</b> ‚Äî –¥–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞\n"
        "<b>/setstatus &lt;id&gt; &lt;status&gt;</b> ‚Äî —Å–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞\n"
        "<b>/deleteorder &lt;id&gt;</b> ‚Äî —É–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑\n"
        "<b>/start</b> ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        parse_mode=ParseMode.HTML,
        reply_markup=get_back_menu()
    )

@dp.callback_query(F.data == 'stats')
async def cb_stats(call: types.CallbackQuery):
    await call.answer()
    if not is_admin(call.from_user.id):
        await call.message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∫—É–ø–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å? https://railguard.ru')
        return
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            cur.execute('SELECT COUNT(*) as count, SUM("totalPrice") as sum, AVG("totalPrice") as avg FROM "Order";')
            stats = cur.fetchone()
            cur.execute('SELECT "items" FROM "Order";')
            all_items = cur.fetchall()
        from collections import Counter
        product_counter = Counter()
        for row in all_items:
            items = row['items']
            if isinstance(items, list):
                for item in items:
                    product_counter[item.get('title', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')] += item.get('quantity', 1)
        top_products = product_counter.most_common(5)
        stats_text = (
            f"<b>–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤:</b> {stats['count']}\n"
            f"<b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–æ–≤:</b> {stats['sum']}‚ÇΩ\n"
            f"<b>–°—Ä–µ–¥–Ω–∏–π —á–µ–∫:</b> {stats['avg']}‚ÇΩ\n\n"
            f"<b>–¢–æ–ø —Ç–æ–≤–∞—Ä—ã:</b>\n" + '\n'.join([f"- {title}: {qty} —à—Ç." for title, qty in top_products])
        )
        await call.message.answer(stats_text, parse_mode=ParseMode.HTML, reply_markup=get_back_menu())
    finally:
        conn.close()

@dp.callback_query(F.data == 'export')
async def cb_export(call: types.CallbackQuery):
    await call.answer()
    if not is_admin(call.from_user.id):
        await call.message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∫—É–ø–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å? https://railguard.ru')
        return
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            cur.execute('SELECT * FROM "Order" ORDER BY "createdAt" DESC;')
            orders = cur.fetchall()
        if not orders:
            await call.message.answer('‚ùå <b>–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.</b>', parse_mode=ParseMode.HTML, reply_markup=get_back_menu())
            return
        output = io.StringIO()
        writer = csv.DictWriter(output, fieldnames=orders[0].keys())
        writer.writeheader()
        for order in orders:
            writer.writerow(order)
        output.seek(0)
        file = BufferedInputFile(output.getvalue().encode(), filename='orders.csv')
        await call.message.answer_document(file, caption='–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤', reply_markup=get_back_menu())
    finally:
        conn.close()

@dp.callback_query(F.data == 'find_menu')
async def cb_find_menu(call: types.CallbackQuery):
    await call.answer()
    if not is_admin(call.from_user.id):
        await call.message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∫—É–ø–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å? https://railguard.ru')
        return
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞:', reply_markup=get_find_menu())

@dp.callback_query(F.data == 'find_contact')
async def cb_find_contact(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    if not is_admin(call.from_user.id):
        await call.message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∫—É–ø–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å? https://railguard.ru')
        return
    await state.set_state('find_query_contact')
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ email –∏–ª–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –∑–∞–∫–∞–∑–∞:', reply_markup=get_back_menu())

@dp.callback_query(F.data == 'find_id')
async def cb_find_id(call: types.CallbackQuery, state: FSMContext):
    await call.answer()
    if not is_admin(call.from_user.id):
        await call.message.answer('–í—ã –Ω–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä. –•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –∫—É–ø–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å? https://railguard.ru')
        return
    await state.set_state('find_query_id')
    await call.message.answer('–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–∫–∞–∑–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞:', reply_markup=get_back_menu())

@dp.message()
async def find_query_handler(message: types.Message, state: FSMContext):
    data = await state.get_state()
    if data == 'find_query_contact':
        query = message.text.strip()
        conn = get_db_connection()
        try:
            with conn.cursor() as cur:
                cur.execute('SELECT * FROM "Order" WHERE (contact->>\'email\' = %s OR contact->>\'phone\' = %s) ORDER BY "createdAt" DESC;', (query, query))
                orders = cur.fetchall()
            if not orders:
                await message.answer('‚ùå <b>–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>', parse_mode=ParseMode.HTML, reply_markup=get_back_menu())
            else:
                for order in orders:
                    msg = format_order(order)
                    await message.answer(msg, parse_mode=ParseMode.HTML, reply_markup=get_status_buttons(order['id']))
        finally:
            conn.close()
        await state.clear()
    elif data == 'find_query_id':
        query = message.text.strip()
        conn = get_db_connection()
        try:
            with conn.cursor() as cur:
                cur.execute('SELECT * FROM "Order" WHERE "id"=%s;', (query,))
                order = cur.fetchone()
            if not order:
                await message.answer('‚ùå <b>–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>', parse_mode=ParseMode.HTML, reply_markup=get_back_menu())
            else:
                msg = format_order(order)
                await message.answer(msg, parse_mode=ParseMode.HTML, reply_markup=get_status_buttons(order['id']))
        finally:
            conn.close()
        await state.clear()

@dp.callback_query(F.data == 'filter_menu')
async def cb_filter_menu(call: types.CallbackQuery):
    await call.answer()
    await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–∫–∞–∑–æ–≤:', reply_markup=get_filter_menu())

@dp.callback_query(OrderFilterCallback.filter())
async def cb_filter_orders(call: types.CallbackQuery, callback_data: OrderFilterCallback):
    await call.answer()
    status = callback_data.status
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            if status == 'all':
                cur.execute('SELECT * FROM "Order" ORDER BY "createdAt" DESC LIMIT 20;')
            else:
                cur.execute('SELECT * FROM "Order" WHERE "status"=%s ORDER BY "createdAt" DESC LIMIT 20;', (status,))
            orders = cur.fetchall()
        if not orders:
            await call.message.answer('‚ùå <b>–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å —Ç–∞–∫–∏–º —Å—Ç–∞—Ç—É—Å–æ–º.</b>', parse_mode=ParseMode.HTML, reply_markup=get_back_menu())
        else:
            text = '\n\n'.join([
                f"<b>ID:</b> <code>{o['id']}</code>\n<b>–°—Ç–∞—Ç—É—Å:</b> {format_status(o['status'])}\n<b>–°—É–º–º–∞:</b> <b>{o['totalPrice']}‚ÇΩ</b>\n<b>–°–æ–∑–¥–∞–Ω:</b> <i>{format_datetime(o['createdAt'])}</i>" for o in orders
            ])
            await call.message.answer(f"<b>–ó–∞–∫–∞–∑—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º:</b> <b>{status if status != 'all' else '–í—Å–µ'}</b>\n\n{text}", parse_mode=ParseMode.HTML, reply_markup=get_back_menu())
    finally:
        conn.close()

@dp.callback_query(F.data == 'mass_select')
async def cb_mass_select(call: types.CallbackQuery):
    await call.answer()
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            cur.execute('SELECT "id", "status", "totalPrice", "createdAt" FROM "Order" ORDER BY "createdAt" DESC LIMIT 20;')
            orders = cur.fetchall()
        if not orders:
            await call.message.answer('‚ùå <b>–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –º–∞—Å—Å–æ–≤—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π.</b>', parse_mode=ParseMode.HTML, reply_markup=get_back_menu())
            return
        builder = InlineKeyboardBuilder()
        for o in orders:
            builder.button(text=f"{o['id']} [{format_status(o['status'])}]", callback_data=f"masspick:{o['id']}")
        builder.button(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
        builder.adjust(2, 1)
        await call.message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑—ã –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è (–Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–µ):', reply_markup=builder.as_markup())
    finally:
        conn.close()

# --- –°–±–æ—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Å—Å–æ–≤–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è ---
selected_mass_ids = set()

@dp.callback_query(F.data.startswith('masspick:'))
async def cb_mass_pick(call: types.CallbackQuery):
    await call.answer()
    order_id = call.data.split(':')[1]
    selected_mass_ids.add(order_id)
    await call.message.answer(f'–í—ã–±—Ä–∞–Ω–æ: {", ".join(selected_mass_ids)}', reply_markup=get_mass_action_menu(",".join(selected_mass_ids)))

@dp.callback_query(MassActionCallback.filter())
async def cb_mass_action(call: types.CallbackQuery, callback_data: MassActionCallback):
    await call.answer()
    ids = callback_data.ids.split(',')
    action = callback_data.action
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            if action == 'delete':
                cur.execute(f'DELETE FROM "Order" WHERE "id" IN %s RETURNING "id";', (tuple(ids),))
                conn.commit()
                await call.message.answer(f'–£–¥–∞–ª–µ–Ω–æ –∑–∞–∫–∞–∑–æ–≤: {len(ids)}', reply_markup=get_back_menu())
            elif action.startswith('setstatus_'):
                new_status = action.split('_')[1]
                cur.execute(f'UPDATE "Order" SET "status"=%s WHERE "id" IN %s;', (new_status, tuple(ids)))
                conn.commit()
                await call.message.answer(f'–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω—ë–Ω –¥–ª—è {len(ids)} –∑–∞–∫–∞–∑–æ–≤.', reply_markup=get_back_menu())
    finally:
        conn.close()
    selected_mass_ids.clear()

# --- –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞: —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö ---
async def poll_new_orders(bot: Bot):
    while True:
        await asyncio.sleep(10)
        conn = get_db_connection()
        try:
            with conn.cursor() as cur:
                cur.execute('SELECT * FROM "Order" ORDER BY "createdAt" DESC LIMIT 1;')
                order = cur.fetchone()
            if order:
                last_id = get_last_order_id()
                if str(order['id']) != str(last_id):
                    msg = format_order(order, new=True)
                    await bot.send_message(chat_id=ADMIN_ID, text=msg, parse_mode=ParseMode.HTML, reply_markup=get_status_buttons(order['id']))
                    set_last_order_id(order['id'])
            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö ---
            with conn.cursor() as cur:
                cur.execute('SELECT * FROM "Order" WHERE "status"=%s AND "createdAt" < NOW() - INTERVAL '"'1 day'"';', ('pending',))
                overdue = cur.fetchall()
            if overdue:
                for o in overdue:
                    msg = f'‚ö†Ô∏è <b>–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π –∑–∞–∫–∞–∑!</b>\n{format_order(o)}'
                    await bot.send_message(chat_id=ADMIN_ID, text=msg, parse_mode=ParseMode.HTML, reply_markup=get_status_buttons(o['id']))
        except Exception as e:
            print('Polling error:', e)
        finally:
            conn.close()

# --- –ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂ ---
@dp.callback_query(F.data == 'sales_graph')
async def cb_sales_graph(call: types.CallbackQuery):
    await call.answer()
    conn = get_db_connection()
    try:
        with conn.cursor() as cur:
            cur.execute('SELECT "createdAt", "totalPrice" FROM "Order" ORDER BY "createdAt" ASC;')
            data = cur.fetchall()
        if not data:
            await call.message.answer('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.', reply_markup=get_back_menu())
            return
        # –ì–æ—Ç–æ–≤–∏–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        dates = [d['createdAt'].date() for d in data]
        prices = [d['totalPrice'] for d in data]
        from collections import defaultdict
        day_sum = defaultdict(int)
        for d, p in zip(dates, prices):
            day_sum[d] += p
        days = sorted(day_sum.keys())
        sums = [day_sum[d] for d in days]
        fig, ax = plt.subplots(figsize=(6, 3))
        ax.plot(days, sums, marker='o')
        ax.set_title('–°—É–º–º–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –¥–Ω—è–º')
        ax.set_xlabel('–î–∞—Ç–∞')
        ax.set_ylabel('–°—É–º–º–∞, ‚ÇΩ')
        fig.autofmt_xdate()
        buf = io.BytesIO()
        plt.tight_layout()
        plt.savefig(buf, format='png')
        buf.seek(0)
        from aiogram.types import BufferedInputFile
        photo = BufferedInputFile(buf.getvalue(), filename='sales.png')
        await call.message.answer_photo(photo, caption='–ì—Ä–∞—Ñ–∏–∫ –ø—Ä–æ–¥–∞–∂', reply_markup=get_back_menu())
        plt.close(fig)
    finally:
        conn.close()

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ ---
@dp.error()
async def on_error(event):
    try:
        if ADMIN_ID:
            await Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML)).send_message(chat_id=ADMIN_ID, text=f"–û—à–∏–±–∫–∞: {event.exception}")
    except Exception as e:
        print("Failed to send error to admin chat:", e)
    print(f'Update {event} caused error {event.exception}')

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    asyncio.create_task(poll_new_orders(bot))
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main()) 