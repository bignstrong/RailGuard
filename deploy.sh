#!/bin/bash

# ============================================
# üöÄ RailGuard Auto-Deploy Script –¥–ª—è Ubuntu
# ============================================

set -e  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö

# –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
trap 'echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫–µ $LINENO${NC}"; exit 1' ERR

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏
INSTALL_LOG="$HOME/railguard-install-$(date +%Y%m%d_%H%M%S).log"
exec > >(tee -a "$INSTALL_LOG")
exec 2>&1

echo -e "${BLUE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${BLUE}‚ïë  üöÑ RailGuard Auto-Deploy             ‚ïë${NC}"
echo -e "${BLUE}‚ïë  –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞     ‚ïë${NC}"
echo -e "${BLUE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo ""
echo -e "${GREEN}üìù –õ–æ–≥ —É—Å—Ç–∞–Ω–æ–≤–∫–∏: $INSTALL_LOG${NC}"
echo ""

# –ü—Ä–æ–≤–µ—Ä–∫–∞ root
if [ "$EUID" -eq 0 ]; then 
    echo -e "${RED}‚ùå –ù–µ –∑–∞–ø—É—Å–∫–∞–π—Ç–µ —Å–∫—Ä–∏–ø—Ç –æ—Ç root! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ sudo –≤–Ω—É—Ç—Ä–∏.${NC}"
    exit 1
fi

# ============================================
# 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã
# ============================================
echo -e "${BLUE}üì¶ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã...${NC}"
sudo apt update
sudo apt upgrade -y

# ============================================
# 2. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ openssl (–µ—Å–ª–∏ –Ω–µ—Ç)
# ============================================
echo -e "${BLUE}üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ openssl...${NC}"
if ! command -v openssl &> /dev/null; then
    sudo apt install -y openssl
    echo -e "${GREEN}‚úÖ OpenSSL —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
fi

# ============================================
# 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker
# ============================================
echo -e "${BLUE}üê≥ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker...${NC}"
if ! command -v docker &> /dev/null; then
    curl -fsSL https://get.docker.com -o get-docker.sh
    sudo sh get-docker.sh
    sudo usermod -aG docker $USER
    rm get-docker.sh
    echo -e "${GREEN}‚úÖ Docker —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Docker —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
fi

# ============================================
# 4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose
# ============================================
echo -e "${BLUE}üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker Compose...${NC}"
if ! docker compose version &> /dev/null; then
    sudo apt install docker-compose-plugin -y
    echo -e "${GREEN}‚úÖ Docker Compose —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Docker Compose —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
fi

# ============================================
# 5. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É—Ç–∏–ª–∏—Ç
# ============================================
echo -e "${BLUE}üõ†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —É—Ç–∏–ª–∏—Ç (git, nginx, certbot)...${NC}"
sudo apt install -y git nginx certbot python3-certbot-nginx ufw htop wget curl dnsutils

# ============================================
# 6. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firewall
# ============================================
echo -e "${BLUE}üî• –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Firewall...${NC}"
sudo ufw --force enable
sudo ufw allow 22/tcp    # SSH
sudo ufw allow 80/tcp    # HTTP
sudo ufw allow 443/tcp   # HTTPS
echo -e "${GREEN}‚úÖ Firewall –Ω–∞—Å—Ç—Ä–æ–µ–Ω${NC}"

# ============================================
# 7. –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞
# ============================================
echo ""
echo -e "${BLUE}üì• –ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ RailGuard...${NC}"
read -p "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ [/opt/railguard]: " INSTALL_PATH
INSTALL_PATH=${INSTALL_PATH:-/opt/railguard}

if [ -d "$INSTALL_PATH" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è $INSTALL_PATH —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç${NC}"
    read -p "–£–¥–∞–ª–∏—Ç—å –∏ –∫–ª–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –∑–∞–Ω–æ–≤–æ? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        sudo rm -rf $INSTALL_PATH
    else
        echo -e "${RED}‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ${NC}"
        exit 1
    fi
fi

sudo mkdir -p $INSTALL_PATH
sudo chown -R $USER:$USER $INSTALL_PATH
git clone https://github.com/bignstrong/RailGuard.git $INSTALL_PATH
cd $INSTALL_PATH

# ============================================
# 8. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ .env —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
# ============================================
echo ""
echo -e "${BLUE}‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è${NC}"

# –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å—Ç–∞—Ä–æ–≥–æ .env
if [ -f ".env" ]; then
    cp .env .env.backup.$(date +%Y%m%d_%H%M%S)
    echo -e "${GREEN}‚úÖ –°—Ç–∞—Ä—ã–π .env —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é${NC}"
fi

cp .env.example .env

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è
POSTGRES_PASSWORD=$(openssl rand -base64 32)

echo -e "${YELLOW}üìù –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è .env:${NC}"
echo ""

# –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–æ–º–µ–Ω–∞
while true; do
    read -p "–í–≤–µ–¥–∏—Ç–µ –¥–æ–º–µ–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, railguard.ru): " DOMAIN
    if [[ $DOMAIN =~ ^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]?\.[a-zA-Z]{2,}$ ]]; then
        break
    else
        echo -e "${RED}‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–æ–º–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.${NC}"
    fi
done

# –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram Bot Token
while true; do
    read -p "–í–≤–µ–¥–∏—Ç–µ Telegram Bot Token: " TELEGRAM_TOKEN
    if [[ $TELEGRAM_TOKEN =~ ^[0-9]+:[A-Za-z0-9_-]+$ ]]; then
        break
    else
        echo -e "${RED}‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤–∏–¥–∞: 123456789:ABCdefGHIjklMNOpqrsTUVwxyz).${NC}"
    fi
done

# –í–∞–ª–∏–¥–∞—Ü–∏—è Telegram Chat ID
while true; do
    read -p "–í–≤–µ–¥–∏—Ç–µ Telegram Chat ID: " TELEGRAM_CHAT_ID
    if [[ $TELEGRAM_CHAT_ID =~ ^-?[0-9]+$ ]]; then
        break
    else
        echo -e "${RED}‚ùå Chat ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.${NC}"
    fi
done

# –ó–∞–ø–æ–ª–Ω—è–µ–º .env
cat > .env << EOF
# Database
POSTGRES_USER=railguard
POSTGRES_PASSWORD=$POSTGRES_PASSWORD
POSTGRES_DB=railguard
DATABASE_URL=postgresql://railguard:$POSTGRES_PASSWORD@postgres:5432/railguard?schema=public

# Telegram Bot
TELEGRAM_BOT_TOKEN=$TELEGRAM_TOKEN
TELEGRAM_CHAT_ID=$TELEGRAM_CHAT_ID

# Site Configuration
NEXT_PUBLIC_SITE_URL=https://$DOMAIN
NODE_ENV=production
EOF

echo -e "${GREEN}‚úÖ –§–∞–π–ª .env —Å–æ–∑–¥–∞–Ω${NC}"

# ============================================
# 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Ä—Ç–æ–≤
# ============================================
echo ""
echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–æ–≤...${NC}"
if ss -tulpn 2>/dev/null | grep -q ":3000 "; then
    echo -e "${RED}‚ùå –ü–æ—Ä—Ç 3000 —É–∂–µ –∑–∞–Ω—è—Ç!${NC}"
    echo -e "${YELLOW}–ü—Ä–æ—Ü–µ—Å—Å—ã –Ω–∞ –ø–æ—Ä—Ç—É 3000:${NC}"
    ss -tulpn | grep ":3000 "
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É—Å—Ç–∞–Ω–æ–≤–∫—É? –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã (y/n): " -n 1 -r
    echo
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        exit 1
    fi
else
    echo -e "${GREEN}‚úÖ –ü–æ—Ä—Ç 3000 —Å–≤–æ–±–æ–¥–µ–Ω${NC}"
fi

# ============================================
# 10. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤ Docker –≥—Ä—É–ø–ø—ã
# ============================================
echo ""
echo -e "${BLUE}üê≥ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤ Docker –≥—Ä—É–ø–ø—ã...${NC}"
echo -e "${YELLOW}‚ö†Ô∏è  –ó–∞–ø—É—Å–∫ –∫–æ–º–∞–Ω–¥ –≤ –Ω–æ–≤–æ–π Docker –≥—Ä—É–ø–ø–µ...${NC}"

# –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –≤ –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø–µ
cat > /tmp/railguard_docker_setup.sh << 'DOCKER_SCRIPT'
#!/bin/bash
set -e

RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

INSTALL_PATH="$1"
cd "$INSTALL_PATH"

# ============================================
# –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
# ============================================
echo ""
echo -e "${BLUE}üöÄ –ó–∞–ø—É—Å–∫ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤...${NC}"
docker compose -f docker-compose.simple.yml up -d --build

# ============================================
# Health check —Å —Ç–∞–π–º–∞—É—Ç–æ–º
# ============================================
echo ""
echo -e "${YELLOW}‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...${NC}"
echo -e "${YELLOW}   (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –¥–æ 60 —Å–µ–∫—É–Ω–¥)${NC}"
sleep 10

for i in {1..30}; do
    if docker compose ps | grep -q "Up" && curl -s http://localhost:3000 > /dev/null 2>&1; then
        echo ""
        echo -e "${GREEN}‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–æ!${NC}"
        APP_READY=true
        break
    fi
    echo -n "."
    sleep 2
done

if [ -z "$APP_READY" ]; then
    echo ""
    echo -e "${YELLOW}‚ö†Ô∏è  –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –¥–æ–ª—å—à–µ –æ–±—ã—á–Ω–æ–≥–æ...${NC}"
    echo -e "${YELLOW}   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker compose logs${NC}"
fi

# ============================================
# –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –ë–î
# ============================================
echo ""
if docker compose ps web | grep -q "Up"; then
    echo -e "${BLUE}üìä –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...${NC}"
    if docker compose exec -T web npx prisma migrate deploy 2>/dev/null; then
        echo -e "${GREEN}‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  –ú–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∏–ª–∏ –æ–Ω–∏ –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è${NC}"
    fi
else
    echo -e "${RED}‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä web –Ω–µ –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏${NC}"
fi

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
echo ""
echo -e "${BLUE}üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤:${NC}"
docker compose ps

DOCKER_SCRIPT

chmod +x /tmp/railguard_docker_setup.sh

# –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ Docker –≥—Ä—É–ø–ø—ã
if ! sg docker "/tmp/railguard_docker_setup.sh $INSTALL_PATH"; then
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤${NC}"
    echo -e "${YELLOW}–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –≤—Ä—É—á–Ω—É—é:${NC}"
    echo -e "  newgrp docker"
    echo -e "  cd $INSTALL_PATH"
    echo -e "  docker compose -f docker-compose.simple.yml up -d --build"
    exit 1
fi

rm /tmp/railguard_docker_setup.sh

# ============================================
# 11. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx
# ============================================
echo ""
echo -e "${BLUE}üåê –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Nginx...${NC}"

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º Docker Nginx –µ—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω
sg docker "cd $INSTALL_PATH && docker compose down nginx" 2>/dev/null || true

# –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥ –¥–ª—è Nginx –Ω–∞ —Ö–æ—Å—Ç–µ
sudo tee /etc/nginx/sites-available/railguard > /dev/null << EOF
server {
    listen 80;
    server_name $DOMAIN www.$DOMAIN;

    # –õ–æ–≥–∏
    access_log /var/log/nginx/railguard-access.log;
    error_log /var/log/nginx/railguard-error.log;

    # Gzip
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css text/xml text/javascript application/json application/javascript;

    # –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º –Ω–∞ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    location / {
        proxy_pass http://localhost:3000;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
        proxy_cache_bypass \$http_upgrade;
        
        proxy_connect_timeout 60s;
        proxy_send_timeout 60s;
        proxy_read_timeout 60s;
    }
}
EOF

# –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥
sudo ln -sf /etc/nginx/sites-available/railguard /etc/nginx/sites-enabled/
sudo rm -f /etc/nginx/sites-enabled/default

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥
if sudo nginx -t; then
    echo -e "${GREEN}‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Nginx –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞${NC}"
else
    echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ Nginx${NC}"
    exit 1
fi

# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Nginx
sudo systemctl restart nginx
sudo systemctl enable nginx

echo -e "${GREEN}‚úÖ Nginx –Ω–∞—Å—Ç—Ä–æ–µ–Ω${NC}"

# ============================================
# 12. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞
# ============================================
echo ""
echo -e "${BLUE}üîí –£—Å—Ç–∞–Ω–æ–≤–∫–∞ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞...${NC}"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –ø–µ—Ä–µ–¥ –ø–æ–ª—É—á–µ–Ω–∏–µ–º SSL
echo -e "${BLUE}üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ DNS –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...${NC}"
SERVER_IP=$(curl -s ifconfig.me 2>/dev/null || curl -s icanhazip.com 2>/dev/null || echo "unknown")
DOMAIN_IP=$(dig +short $DOMAIN 2>/dev/null | tail -n1)

if [ -n "$DOMAIN_IP" ] && [ "$SERVER_IP" != "unknown" ]; then
    if [ "$SERVER_IP" = "$DOMAIN_IP" ]; then
        echo -e "${GREEN}‚úÖ DNS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ ($DOMAIN ‚Üí $SERVER_IP)${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  DNS –≤–æ–∑–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ:${NC}"
        echo -e "    –î–æ–º–µ–Ω $DOMAIN ‚Üí $DOMAIN_IP"
        echo -e "    –°–µ—Ä–≤–µ—Ä IP: $SERVER_IP"
        echo -e "${YELLOW}    SSL –º–æ–∂–µ—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –±–µ–∑ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ DNS${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å DNS${NC}"
fi

read -p "–ü–æ–ª—É—á–∏—Ç—å SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –æ—Ç Let's Encrypt? (y/n): " -n 1 -r
echo
if [[ $REPLY =~ ^[Yy]$ ]]; then
    while true; do
        read -p "–í–≤–µ–¥–∏—Ç–µ email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: " EMAIL
        if [[ $EMAIL =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$ ]]; then
            break
        else
            echo -e "${RED}‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.${NC}"
        fi
    done
    
    if sudo certbot --nginx -d $DOMAIN -d www.$DOMAIN --non-interactive --agree-tos --email $EMAIL; then
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        sudo systemctl enable certbot.timer
        echo -e "${GREEN}‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è
        CERT_EXPIRY=$(sudo openssl x509 -enddate -noout -in /etc/letsencrypt/live/$DOMAIN/fullchain.pem 2>/dev/null | cut -d= -f2)
        if [ -n "$CERT_EXPIRY" ]; then
            echo -e "${GREEN}üìÖ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω –¥–æ: $CERT_EXPIRY${NC}"
        fi
    else
        echo -e "${RED}‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞${NC}"
        echo -e "${YELLOW}–ü—Ä–æ–≤–µ—Ä—å—Ç–µ:${NC}"
        echo -e "  1. –î–æ–º–µ–Ω $DOMAIN —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ —ç—Ç–æ—Ç —Å–µ—Ä–≤–µ—Ä ($SERVER_IP)"
        echo -e "  2. –ü–æ—Ä—Ç—ã 80 –∏ 443 –æ—Ç–∫—Ä—ã—Ç—ã"
        echo -e "  3. Nginx –∑–∞–ø—É—â–µ–Ω –∏ –¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
fi

# ============================================
# 13. –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
# ============================================
echo ""
echo -e "${BLUE}üìù –°–æ–∑–¥–∞–Ω–∏–µ —Å–∫—Ä–∏–ø—Ç–æ–≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è...${NC}"

# –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
cat > $INSTALL_PATH/update.sh << EOF
#!/bin/bash
cd $INSTALL_PATH
echo "üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ RailGuard..."
git stash  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
git pull origin master
git stash pop 2>/dev/null || true  # –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
docker compose -f docker-compose.simple.yml up -d --build
docker compose exec -T web npx prisma migrate deploy 2>/dev/null || true
echo "‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
EOF
chmod +x $INSTALL_PATH/update.sh

# –°–∫—Ä–∏–ø—Ç –±—ç–∫–∞–ø–∞
cat > $INSTALL_PATH/backup.sh << EOF
#!/bin/bash
BACKUP_DIR="$INSTALL_PATH/backups"
mkdir -p \$BACKUP_DIR
BACKUP_FILE="\$BACKUP_DIR/backup_\$(date +%Y%m%d_%H%M%S).sql"
cd $INSTALL_PATH
docker compose exec -T postgres pg_dump -U railguard railguard > \$BACKUP_FILE
if [ -f "\$BACKUP_FILE" ]; then
    echo "‚úÖ Backup —Å–æ–∑–¥–∞–Ω: \$BACKUP_FILE"
    echo "üìä –†–∞–∑–º–µ—Ä: \$(du -h \$BACKUP_FILE | cut -f1)"
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (—Å—Ç–∞—Ä—à–µ 7 –¥–Ω–µ–π)
    find \$BACKUP_DIR -name "backup_*.sql" -mtime +7 -delete
    echo "üóëÔ∏è  –°—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã (>7 –¥–Ω–µ–π) —É–¥–∞–ª–µ–Ω—ã"
else
    echo "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞"
    exit 1
fi
EOF
chmod +x $INSTALL_PATH/backup.sh

# –°–∫—Ä–∏–ø—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–æ–≥–æ–≤
cat > $INSTALL_PATH/logs.sh << EOF
#!/bin/bash
cd $INSTALL_PATH
docker compose logs -f --tail=100
EOF
chmod +x $INSTALL_PATH/logs.sh

# –°–∫—Ä–∏–ø—Ç –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –±—ç–∫–∞–ø–∞
cat > $INSTALL_PATH/restore.sh << 'EOF'
#!/bin/bash
BACKUP_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )/backups"

if [ ! -d "$BACKUP_DIR" ] || [ -z "$(ls -A $BACKUP_DIR/*.sql 2>/dev/null)" ]; then
    echo "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤"
    exit 1
fi

echo "üì¶ –î–æ—Å—Ç—É–ø–Ω—ã–µ –±—ç–∫–∞–ø—ã:"
select BACKUP_FILE in $BACKUP_DIR/*.sql; do
    if [ -n "$BACKUP_FILE" ]; then
        echo "üîÑ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑: $BACKUP_FILE"
        read -p "‚ö†Ô∏è  –≠—Ç–æ —É–¥–∞–ª–∏—Ç —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ! –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/n): " -n 1 -r
        echo
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            cd "$( dirname "${BASH_SOURCE[0]}" )"
            docker compose exec -T postgres psql -U railguard -d railguard < "$BACKUP_FILE"
            echo "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ"
        else
            echo "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ"
        fi
        break
    fi
done
EOF
chmod +x $INSTALL_PATH/restore.sh

# –î–æ–±–∞–≤–ª—è–µ–º cron –¥–ª—è –∞–≤—Ç–æ–±—ç–∫–∞–ø–∞
(crontab -l 2>/dev/null | grep -v "$INSTALL_PATH/backup.sh"; echo "0 3 * * * $INSTALL_PATH/backup.sh") | crontab -

echo -e "${GREEN}‚úÖ –°–∫—Ä–∏–ø—Ç—ã —Å–æ–∑–¥–∞–Ω—ã${NC}"
echo -e "${GREEN}‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –±—ç–∫–∞–ø –Ω–∞—Å—Ç—Ä–æ–µ–Ω (–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00)${NC}"

# ============================================
# 14. –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
# ============================================
echo ""
echo -e "${BLUE}üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤...${NC}"
echo ""

checks_passed=0
checks_total=5

# 1. Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
if sg docker "cd $INSTALL_PATH && docker compose ps" | grep -q "Up"; then
    echo -e "${GREEN}‚úÖ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã${NC}"
    ((checks_passed++))
else
    echo -e "${RED}‚ùå Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã${NC}"
fi

# 2. –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
if sg docker "cd $INSTALL_PATH && docker compose exec -T postgres pg_isready -U railguard" > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö PostgreSQL —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
    ((checks_passed++))
else
    echo -e "${RED}‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç${NC}"
fi

# 3. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:3000 2>/dev/null || echo "000")
if [[ "$HTTP_CODE" =~ ^(200|301|302)$ ]]; then
    echo -e "${GREEN}‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Ç–≤–µ—á–∞–µ—Ç (HTTP $HTTP_CODE)${NC}"
    ((checks_passed++))
else
    echo -e "${RED}‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç (HTTP $HTTP_CODE)${NC}"
fi

# 4. Nginx
if sudo systemctl is-active --quiet nginx; then
    echo -e "${GREEN}‚úÖ Nginx —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
    ((checks_passed++))
else
    echo -e "${RED}‚ùå Nginx –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç${NC}"
fi

# 5. SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç
if [ -f "/etc/letsencrypt/live/$DOMAIN/fullchain.pem" ]; then
    CERT_EXPIRY=$(sudo openssl x509 -enddate -noout -in /etc/letsencrypt/live/$DOMAIN/fullchain.pem 2>/dev/null | cut -d= -f2)
    if [ -n "$CERT_EXPIRY" ]; then
        echo -e "${GREEN}‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–¥–æ: $CERT_EXPIRY)${NC}"
    else
        echo -e "${GREEN}‚úÖ SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
    fi
    ((checks_passed++))
else
    echo -e "${YELLOW}‚ö†Ô∏è  SSL —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω${NC}"
fi

echo ""
echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"
echo -e "${BLUE}–ü—Ä–æ–π–¥–µ–Ω–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: ${GREEN}$checks_passed${BLUE}/${checks_total}${NC}"
echo -e "${BLUE}‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ${NC}"

# ============================================
# 15. –ò—Ç–æ–≥–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
# ============================================
echo ""
echo -e "${GREEN}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${GREEN}‚ïë  üéâ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!              ‚ïë${NC}"
echo -e "${GREEN}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"
echo ""
echo -e "${BLUE}üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ:${NC}"
echo -e "  üåê –°–∞–π—Ç:        ${GREEN}https://$DOMAIN${NC}"
echo -e "  üìÅ –ü—É—Ç—å:        ${GREEN}$INSTALL_PATH${NC}"
echo -e "  üîë –ü–∞—Ä–æ–ª—å –ë–î:   ${GREEN}$POSTGRES_PASSWORD${NC}"
echo -e "  üìù –õ–æ–≥:         ${GREEN}$INSTALL_LOG${NC}"
echo ""
echo -e "${BLUE}üìù –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:${NC}"
echo -e "  –õ–æ–≥–∏:           ${GREEN}cd $INSTALL_PATH && ./logs.sh${NC}"
echo -e "  –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ:     ${GREEN}cd $INSTALL_PATH && ./update.sh${NC}"
echo -e "  –ë—ç–∫–∞–ø:          ${GREEN}cd $INSTALL_PATH && ./backup.sh${NC}"
echo -e "  –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ: ${GREEN}cd $INSTALL_PATH && ./restore.sh${NC}"
echo -e "  –°—Ç–∞—Ç—É—Å:         ${GREEN}cd $INSTALL_PATH && docker compose ps${NC}"
echo -e "  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫:     ${GREEN}cd $INSTALL_PATH && docker compose restart${NC}"
echo ""
echo -e "${YELLOW}‚ö†Ô∏è  –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω–∏—Ç–µ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º –º–µ—Å—Ç–µ!${NC}"
echo -e "${YELLOW}üìã –ü–∞—Ä–æ–ª—å –ë–î —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤: ${GREEN}$INSTALL_PATH/.env${NC}"
echo ""

if [ $checks_passed -lt $checks_total ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–µ –ø—Ä–æ—à–ª–∏. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:${NC}"
    echo -e "  1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: ${GREEN}cd $INSTALL_PATH && ./logs.sh${NC}"
    echo -e "  2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç–∞—Ç—É—Å: ${GREEN}cd $INSTALL_PATH && docker compose ps${NC}"
    echo -e "  3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ: ${GREEN}cd $INSTALL_PATH && docker compose restart${NC}"
    echo ""
fi

echo -e "${GREEN}‚ú® RailGuard –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!${NC}"
echo ""
echo -e "${BLUE}üîÑ –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –±—É–¥—É—â–µ–º:${NC}"
echo -e "  ${GREEN}cd $INSTALL_PATH && ./update.sh${NC}"
echo ""
echo -e "${BLUE}üíæ –ë—ç–∫–∞–ø—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 3:00${NC}"
echo -e "${BLUE}üì¶ –ò–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –≤—Ä—É—á–Ω—É—é: ${GREEN}cd $INSTALL_PATH && ./backup.sh${NC}"